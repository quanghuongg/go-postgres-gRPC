// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: bidaspin.proto

package bidaspin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SpinRequest) Reset() {
	*x = SpinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bidaspin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinRequest) ProtoMessage() {}

func (x *SpinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bidaspin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinRequest.ProtoReflect.Descriptor instead.
func (*SpinRequest) Descriptor() ([]byte, []int) {
	return file_bidaspin_proto_rawDescGZIP(), []int{0}
}

func (x *SpinRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SpinRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpinRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The response message containing the greetings
type SpinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SpinResponse) Reset() {
	*x = SpinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bidaspin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinResponse) ProtoMessage() {}

func (x *SpinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bidaspin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinResponse.ProtoReflect.Descriptor instead.
func (*SpinResponse) Descriptor() ([]byte, []int) {
	return file_bidaspin_proto_rawDescGZIP(), []int{1}
}

func (x *SpinResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SpinResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_bidaspin_proto protoreflect.FileDescriptor

var file_bidaspin_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x69, 0x64, 0x61, 0x73, 0x70, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x4f, 0x0a, 0x0b, 0x53, 0x70, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x70, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x94, 0x01, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x61, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x69, 0x6e, 0x12,
	0x0c, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x53, 0x70, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x0c,
	0x2e, 0x53, 0x70, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53,
	0x70, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a,
	0x06, 0x44, 0x6f, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2f, 0x62, 0x69, 0x64, 0x61, 0x73,
	0x70, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bidaspin_proto_rawDescOnce sync.Once
	file_bidaspin_proto_rawDescData = file_bidaspin_proto_rawDesc
)

func file_bidaspin_proto_rawDescGZIP() []byte {
	file_bidaspin_proto_rawDescOnce.Do(func() {
		file_bidaspin_proto_rawDescData = protoimpl.X.CompressGZIP(file_bidaspin_proto_rawDescData)
	})
	return file_bidaspin_proto_rawDescData
}

var file_bidaspin_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_bidaspin_proto_goTypes = []interface{}{
	(*SpinRequest)(nil),  // 0: SpinRequest
	(*SpinResponse)(nil), // 1: SpinResponse
}
var file_bidaspin_proto_depIdxs = []int32{
	0, // 0: BidaSpin.UpdateTotalSpin:input_type -> SpinRequest
	0, // 1: BidaSpin.GetTotalSpin:input_type -> SpinRequest
	0, // 2: BidaSpin.DoSpin:input_type -> SpinRequest
	1, // 3: BidaSpin.UpdateTotalSpin:output_type -> SpinResponse
	1, // 4: BidaSpin.GetTotalSpin:output_type -> SpinResponse
	1, // 5: BidaSpin.DoSpin:output_type -> SpinResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bidaspin_proto_init() }
func file_bidaspin_proto_init() {
	if File_bidaspin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bidaspin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bidaspin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bidaspin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bidaspin_proto_goTypes,
		DependencyIndexes: file_bidaspin_proto_depIdxs,
		MessageInfos:      file_bidaspin_proto_msgTypes,
	}.Build()
	File_bidaspin_proto = out.File
	file_bidaspin_proto_rawDesc = nil
	file_bidaspin_proto_goTypes = nil
	file_bidaspin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BidaSpinClient is the client API for BidaSpin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BidaSpinClient interface {
	UpdateTotalSpin(ctx context.Context, in *SpinRequest, opts ...grpc.CallOption) (*SpinResponse, error)
	GetTotalSpin(ctx context.Context, in *SpinRequest, opts ...grpc.CallOption) (*SpinResponse, error)
	DoSpin(ctx context.Context, in *SpinRequest, opts ...grpc.CallOption) (*SpinResponse, error)
}

type bidaSpinClient struct {
	cc grpc.ClientConnInterface
}

func NewBidaSpinClient(cc grpc.ClientConnInterface) BidaSpinClient {
	return &bidaSpinClient{cc}
}

func (c *bidaSpinClient) UpdateTotalSpin(ctx context.Context, in *SpinRequest, opts ...grpc.CallOption) (*SpinResponse, error) {
	out := new(SpinResponse)
	err := c.cc.Invoke(ctx, "/BidaSpin/UpdateTotalSpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidaSpinClient) GetTotalSpin(ctx context.Context, in *SpinRequest, opts ...grpc.CallOption) (*SpinResponse, error) {
	out := new(SpinResponse)
	err := c.cc.Invoke(ctx, "/BidaSpin/GetTotalSpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidaSpinClient) DoSpin(ctx context.Context, in *SpinRequest, opts ...grpc.CallOption) (*SpinResponse, error) {
	out := new(SpinResponse)
	err := c.cc.Invoke(ctx, "/BidaSpin/DoSpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidaSpinServer is the server API for BidaSpin service.
type BidaSpinServer interface {
	UpdateTotalSpin(context.Context, *SpinRequest) (*SpinResponse, error)
	GetTotalSpin(context.Context, *SpinRequest) (*SpinResponse, error)
	DoSpin(context.Context, *SpinRequest) (*SpinResponse, error)
}

// UnimplementedBidaSpinServer can be embedded to have forward compatible implementations.
type UnimplementedBidaSpinServer struct {
}

func (*UnimplementedBidaSpinServer) UpdateTotalSpin(context.Context, *SpinRequest) (*SpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTotalSpin not implemented")
}
func (*UnimplementedBidaSpinServer) GetTotalSpin(context.Context, *SpinRequest) (*SpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalSpin not implemented")
}
func (*UnimplementedBidaSpinServer) DoSpin(context.Context, *SpinRequest) (*SpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSpin not implemented")
}

func RegisterBidaSpinServer(s *grpc.Server, srv BidaSpinServer) {
	s.RegisterService(&_BidaSpin_serviceDesc, srv)
}

func _BidaSpin_UpdateTotalSpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidaSpinServer).UpdateTotalSpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BidaSpin/UpdateTotalSpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidaSpinServer).UpdateTotalSpin(ctx, req.(*SpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidaSpin_GetTotalSpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidaSpinServer).GetTotalSpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BidaSpin/GetTotalSpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidaSpinServer).GetTotalSpin(ctx, req.(*SpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidaSpin_DoSpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidaSpinServer).DoSpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BidaSpin/DoSpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidaSpinServer).DoSpin(ctx, req.(*SpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BidaSpin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BidaSpin",
	HandlerType: (*BidaSpinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTotalSpin",
			Handler:    _BidaSpin_UpdateTotalSpin_Handler,
		},
		{
			MethodName: "GetTotalSpin",
			Handler:    _BidaSpin_GetTotalSpin_Handler,
		},
		{
			MethodName: "DoSpin",
			Handler:    _BidaSpin_DoSpin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bidaspin.proto",
}
